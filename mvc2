1.对字段的验证：验证需要通过业务层来完成，一般需要通过数据库服务器

2.提交表单，到Servlet的doPost()方法，doPost再转发回原JSP页面，直到该页面加载完成，整个过程只有一个HttpServletRequest对象

 加载页面      |  newcustomer.jsp     |   提交表单     | CustomerServlet
------------>  | request获取表单参数  |  ------------> | request获取表单参数
       ①       |                      |      ②         |
                        ^                                        |
                        |                                        |
                        |                                        |
                        |             请求转发request            |  
                        |—————————————————————————————————————   |
  
上图一共有两个请求：
1.加载页面的请求：发出请求到页面加载完成，request结束
2.点击提交按钮，到Servlet，发出了一个request,Servlet转发到newcustomer.jsp直到页面加载完成，整个过程是一个request

doPost(request, response) ----> request.getRequestDispatcher(path).forward(request,response);

3.表单的回显问题(了解）：

<input type="text" name="tname" 
					value="<%= request.getParameter("tname") == null ? "" : request.getParameter("tname")%>"/>
          
4.修改的流程：先显示页面，修改字段，提交表单，修改
  
1).id一般都使用隐藏域:<input type="hidden" name="teacherno" value="<%=  teacherno%>" />

2).若某一字段在数据表中不允许重复的解决方案：

①.在表单中使用隐藏域保存该字段的原始值：<input type="hidden" name="oldName" value="<%=  oldName%>" />

②.在Servlet中同时获取原始值和新提交的值：比对，若一致，则通过；若不一致，则使用新提交的值去查询数据表

		if (!oldName.equalsIgnoreCase(tname)) {
			long count = customerDAO.getCountWithTname(tname);
			//2.2若返回值大于0，则响应updatecustomer.jsp页面：
			//通过转发的方式来响应updatecustomer.jsp
			if (count > 0) {
				//2.2.1要求在newcustomer.jsp页面显示一个错误提示：用户名name已经被占用，请重新选择！
				//在request中放入一个属性message：用户名name已经被占用，请重新选择！
				//在页面上通过request.getAtribute("message")的方式来显示		request.setAttribute("message", "用户名"+tname+"已经被占用，请重新选择！");
				request.setAttribute("message","用户名" + tname + "已经被占用，请重新选择！" );
				
				//2.2.2newcustomer.jsp的表单值可以回显。		
				//major,prof,department显示提交的新数据，tname显示oldName,而不是新提交的tame
				//2.2.3结束方法：return	
				request.getRequestDispatcher("/updatecustomer.jsp").forward(request, response);
				return;
			}

3).在修改状态下，若验证没有通过，表单的回显问题：不允许重复的字段要给予提示，但字段中显示旧的字段的值，
允许修改的则为新的字段的值，通过Ajax会有更好的用户体验。

5.response.sendRedirect()方法的副作用可以防止表单的重复提交

6.面向接口编程：在类中调用接口方法，而不必关心具体实现。
			
       
