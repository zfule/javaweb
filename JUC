接下来学习JUC

1. Java JUC简介
2. volatile关键字-内存可见性
3. 原子变量-CAS算法
4. ConcurrentHasMap锁分段机制
5. CountDownloadLatch闭锁
6. 实现Callable接口
7. Lock同步锁
8. Condition控制线程通信
9. 线程八锁
10. 线程按序交替(面试题)
package cn.zhangfl.juc;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * 编写一个程序，开启三个线程，这三个线程的ID分别为A、B、C，
 * 每个线程将自己的ID在屏幕上打印10遍，要求输出的结果必须按顺序显示。
 * 如：ABCABCABC......依次递归
 * @author 17799
 *
 */
public class TestABCAlternate {
	public static void main(String[] args) {
		AlternateDemo alternateDemo = new AlternateDemo();
		
		new Thread(new Runnable() {	
			@Override
			public void run() {
				for (int i = 1; i <= 20; i++) {
					alternateDemo.loopA(i);
				}		
			}
		}, "A").start();
		
		new Thread(new Runnable() {	
			@Override
			public void run() {
				for (int i = 1; i <= 20; i++) {
					alternateDemo.loopB(i);
				}		
			}
		}, "B").start();
		
		new Thread(new Runnable() {	
			@Override
			public void run() {
				for (int i = 1; i <= 20; i++) {
					alternateDemo.loopC(i);
					
					System.out.println("---------------------");
				}		
			}
		}, "C").start();
		
		
	}

}

class AlternateDemo{
	private int number = 1; //当前正在执行线程的标记
	
	private Lock lock = new ReentrantLock();
	
	private Condition condition1 = lock.newCondition();
	private Condition condition2 = lock.newCondition();
	private Condition condition3 = lock.newCondition();
	
	/**
	 * 
	 * @param totalLoop 循环第几轮
	 */
	public void loopA(int totalLoop) {
		lock.lock();
		
		try {
			//1. 判断
			if (number != 1) {
				condition1.await();
			}
			
			//2. 打印
			for (int i = 1; i <= 1; i++) {
				System.out.println(Thread.currentThread().getName() + "\t" + i + "\t" + totalLoop);
			}
			
			//3. 唤醒
			number = 2;
			condition2.signal();
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			lock.unlock();
		}
	}
	
	public void loopB(int totalLoop) {
		lock.lock();
		
		try {
			//1. 判断
			if (number != 2) {
				condition2.await();
			}
			
			//2. 打印
			for (int i = 1; i <= 1; i++) {
				System.out.println(Thread.currentThread().getName() + "\t" + i + "\t" + totalLoop);
			}
			
			//3. 唤醒
			number = 3;
			condition3.signal();
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			lock.unlock();
		}
	}
	
	public void loopC(int totalLoop) {
		lock.lock();
		
		try {
			//1. 判断
			if (number != 3) {
				condition3.await();
			}
			
			//2. 打印
			for (int i = 1; i <= 1; i++) {
				System.out.println(Thread.currentThread().getName() + "\t" + i + "\t" + totalLoop);
			}
			
			//3. 唤醒
			number = 1;
			condition1.signal();
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			lock.unlock();
		}
	}
}

11. ReadWriteLock读写锁
package cn.zhangfl.juc;

import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

/**
 * 1. ReadWriteLock : 读写锁
 * 
 * 写写/读写 需要"互斥"
 * 读读不需要互斥
 * @author 17799
 *
 */
public class TestReadWriteLock {
	public static void main(String[] args) {
		ReadWriteLockDemo rw = new ReadWriteLockDemo();
		
		new Thread(new Runnable() {
			
			@Override
			public void run() {
				rw.set((int)(Math.random() * 101));
			}
		}, "Write").start();
		
		for (int i = 0; i < 100; i++) {
			new Thread(new Runnable() {
				
				@Override
				public void run() {
					rw.get();
					
				}
			}).start();
		}		
	}
}

class ReadWriteLockDemo{
	
	private int number = 0;
	
	private ReadWriteLock lock = new ReentrantReadWriteLock();
	
	//读
	public void get() {
		lock.readLock().lock();
		
		try {
			System.out.println(Thread.currentThread().getName() + " : " + number);
		} finally {
			lock.readLock().unlock(); //释放锁
		}
	}
	
	//写
	public void set(int number) {
		lock.writeLock().lock();
		
		try {
			System.out.println(Thread.currentThread().getName() + "^^");
			this.number = number;
		} finally {
			lock.writeLock().unlock();
		}
	}
}

12. 线程池
13. 线程调度
14. ForkJoinPool分支/合并框架 工作窃取
