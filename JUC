接下来学习JUC

1. Java JUC简介
2. volatile关键字-内存可见性
package cn.zhangfl.juc;

public class TestVolation {
	public static void main(String[] args) {
		ThreadDemo threadDemo = new ThreadDemo();
		new Thread(threadDemo).start();
		
		//System.out.println(threadDemo.isFlag());
		
		while (true) {
			System.out.println("threadDemo.isFlag() = " + threadDemo.isFlag());
			if (threadDemo.isFlag()) {
				System.out.println("-----------");
				break;
			}
		}
	}
}

class ThreadDemo implements Runnable{
	
	private volatile boolean flag = false;

	@Override
	public void run() {
		try {
			Thread.sleep(200);
		} catch (InterruptedException e) {}
		
		flag = true;
		
		System.out.println("flag = " + isFlag() );
	}

	public boolean isFlag() {
		return flag;
	}

	public void setFlag(boolean flag) {
		this.flag = flag;
	}
	
	
	
}

3. 原子变量-CAS算法
package cn.zhangfl.juc;

import java.util.concurrent.atomic.AtomicInteger;

/**
 * 二、原子变量：jdk1.5之后java.util.concurrent.atomic包下提供了常用的原子变量
 * 				1. volatile保证内存可见性
 * 				2. CAS(Compare-And-Swap)算法保证数据的原子性
 * 					CAS算法是硬件对于并发操作共享数据的支持
 * 					CAS包含了三个操作数:
 * 						内存值 V
 * 						预估值 A
 * 						更新值 B
 * 						当且仅当V==A时，V = B，否则，将不做任何操作
 * 
 * @author 17799
 *
 */

public class TestAtomicDemo {
	public static void main(String[] args) {
		AtomicDemo atomicDemo = new AtomicDemo();
		
		for (int i = 0; i < 10; i++) {
			new Thread(atomicDemo).start();
		}
	}
}

class AtomicDemo implements Runnable{
//	private int serialNumber = 0;
	
	private AtomicInteger serialNumber = new AtomicInteger();
	
	@Override
	public void run() {
		
		try {
			Thread.sleep(200);
		} catch (InterruptedException e) {}
		
		System.out.println(Thread.currentThread().getName() + ":" + getSerialNumber());
	}

	public int getSerialNumber() {
		return serialNumber.getAndIncrement();
	}		
}

4. ConcurrentHasMap锁分段机制
5. CountDownloadLatch闭锁
6. 实现Callable接口
7. Lock同步锁
8. Condition控制线程通信
package cn.zhangfl.juc;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * 生产者和消费者
 * @author 17799
 *
 */
public class TestProductAndConsumerForLock {
	public static void main(String[] args) {
		Clerk clerk = new Clerk();
		
		Productor pro = new Productor(clerk);
		Consumer cus = new Consumer(clerk);
		
		new Thread(pro, "生产者A").start();
		new Thread(cus, "消费者B").start();
		
		new Thread(pro, "生产者C").start();
		new Thread(cus, "消费者D").start();
		
	}
}

//店员
class Clerk{
	
	private int product = 0;
	
	private Lock lock = new ReentrantLock();
	private Condition condition = lock.newCondition();
	
	//进货
	public void get() {
		lock.lock();//上锁
		
		try {
			while (product >= 1) { //为了避免虚假唤醒问题，应该总是使用在循环中
				System.out.println("产品已满！");		
				//产品已满，就停止生产，等待唤醒后再次进货
				try {
//					this.wait();
					condition.await();
				} catch (InterruptedException e) {}
			}
			System.out.println(Thread.currentThread().getName() + " : " + ++product);	
			//生产者成功生产一个产品，说明已经有多余产品用于销售，可以消费一个产品，
//			this.notifyAll();
			condition.signalAll();
		} finally {
			lock.unlock();//释放锁
		}
		
	}
	
	//卖货
	public void sale() {
		lock.lock();
	
		try {
			while (product <= 0) {
				System.out.println("缺货！");
				
				//产品缺货，停止销售，等待唤醒后再次销售
				try {
//					this.wait();
					condition.await();
				} catch (InterruptedException e) {}			
			}
			System.out.println(Thread.currentThread().getName() + " : " + --product);
//			this.notifyAll();
			condition.signalAll();
		} finally {
			lock.unlock();
		}
		
	}
	
}

//生产者
class Productor implements Runnable{
	private Clerk clerk;
	
	public Productor(Clerk clerk) {
		
		try {
			Thread.sleep(200);
		} catch (InterruptedException e) {}
		
		this.clerk = clerk;
	}
	
	@Override
	public void run() {
		for (int i = 0; i < 20; i++) {
			clerk.get();
		}
		
	}
	
	
}

//消费者
class Consumer implements Runnable{
	private Clerk clerk;
	
	public Consumer (Clerk clerk) {
		this.clerk = clerk;
	}
	
	@Override
	public void run() {
		for (int i = 0; i < 20; i++) {
			clerk.sale();
		}
		
	}
}


9. 线程八锁
package cn.zhangfl.juc;

/**
 * 题目：判断打印的"one" or "two"?
 * 
 * 1. 两个普通同步方法，两个线程，标准打印，打印？ //one two
 * 2. 新增Thread.sleep()给getOne()，打印？ //one two
 * 3. 新增普通方法getThree()，打印？// three one two
 * 4. 两个普通同步方法，两个Number对象，打印？ //two one
 * 5. 修改getOne()为静态同步方法,打印？ //two one
 * 6. 修改两个方法均为静态同步方法，一个Number 对象？ //one two
 * 7. 一个静态同步方法，一个非静态同步方法，两个Number对象？ //two one
 * 8. 两个静态同步方法，两个Number对象？ // one two
 * 
 * 线程八锁的关键：
 * ①非静态方法的锁默认为this, 静态方法的锁为对应的Class实例
 * ②某一个时刻内，只能有一个线程有锁，无论几个方法。
 * @author 17799
 *
 */
public class TestThread8Monitor {
	public static void main(String[] args) {
		Number number = new Number();
		Number number2 = new Number();
		
		new Thread(new Runnable() {
			
			@Override
			public void run() {
				number.getOne();				
			}
		}).start();
		
		new Thread(new Runnable() {
			
			@Override
			public void run() {
//				number.getTwo();
				number2.getTwo();
			}
		}).start();
		
		/*
		 * new Thread(new Runnable() {
		 * 
		 * @Override public void run() { number.getThree(); } }).start();
		 */
	}
}

class Number{
	public static synchronized void getOne(){ //Number.class
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {}
		System.out.println("one");
	}
	
	public static synchronized void getTwo() { //this
		System.out.println("two");
	}
	
	public void getThree() {
		System.out.println("three");
	}
}



10. 线程按序交替(面试题)
package cn.zhangfl.juc;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * 编写一个程序，开启三个线程，这三个线程的ID分别为A、B、C，
 * 每个线程将自己的ID在屏幕上打印10遍，要求输出的结果必须按顺序显示。
 * 如：ABCABCABC......依次递归
 * @author 17799
 *
 */
public class TestABCAlternate {
	public static void main(String[] args) {
		AlternateDemo alternateDemo = new AlternateDemo();
		
		new Thread(new Runnable() {	
			@Override
			public void run() {
				for (int i = 1; i <= 20; i++) {
					alternateDemo.loopA(i);
				}		
			}
		}, "A").start();
		
		new Thread(new Runnable() {	
			@Override
			public void run() {
				for (int i = 1; i <= 20; i++) {
					alternateDemo.loopB(i);
				}		
			}
		}, "B").start();
		
		new Thread(new Runnable() {	
			@Override
			public void run() {
				for (int i = 1; i <= 20; i++) {
					alternateDemo.loopC(i);
					
					System.out.println("---------------------");
				}		
			}
		}, "C").start();
		
		
	}

}

class AlternateDemo{
	private int number = 1; //当前正在执行线程的标记
	
	private Lock lock = new ReentrantLock();
	
	private Condition condition1 = lock.newCondition();
	private Condition condition2 = lock.newCondition();
	private Condition condition3 = lock.newCondition();
	
	/**
	 * 
	 * @param totalLoop 循环第几轮
	 */
	public void loopA(int totalLoop) {
		lock.lock();
		
		try {
			//1. 判断
			if (number != 1) {
				condition1.await();
			}
			
			//2. 打印
			for (int i = 1; i <= 1; i++) {
				System.out.println(Thread.currentThread().getName() + "\t" + i + "\t" + totalLoop);
			}
			
			//3. 唤醒
			number = 2;
			condition2.signal();
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			lock.unlock();
		}
	}
	
	public void loopB(int totalLoop) {
		lock.lock();
		
		try {
			//1. 判断
			if (number != 2) {
				condition2.await();
			}
			
			//2. 打印
			for (int i = 1; i <= 1; i++) {
				System.out.println(Thread.currentThread().getName() + "\t" + i + "\t" + totalLoop);
			}
			
			//3. 唤醒
			number = 3;
			condition3.signal();
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			lock.unlock();
		}
	}
	
	public void loopC(int totalLoop) {
		lock.lock();
		
		try {
			//1. 判断
			if (number != 3) {
				condition3.await();
			}
			
			//2. 打印
			for (int i = 1; i <= 1; i++) {
				System.out.println(Thread.currentThread().getName() + "\t" + i + "\t" + totalLoop);
			}
			
			//3. 唤醒
			number = 1;
			condition1.signal();
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			lock.unlock();
		}
	}
}

11. ReadWriteLock读写锁
package cn.zhangfl.juc;

import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

/**
 * 1. ReadWriteLock : 读写锁
 * 
 * 写写/读写 需要"互斥"
 * 读读不需要互斥
 * @author 17799
 *
 */
public class TestReadWriteLock {
	public static void main(String[] args) {
		ReadWriteLockDemo rw = new ReadWriteLockDemo();
		
		new Thread(new Runnable() {
			
			@Override
			public void run() {
				rw.set((int)(Math.random() * 101));
			}
		}, "Write").start();
		
		for (int i = 0; i < 100; i++) {
			new Thread(new Runnable() {
				
				@Override
				public void run() {
					rw.get();
					
				}
			}).start();
		}		
	}
}

class ReadWriteLockDemo{
	
	private int number = 0;
	
	private ReadWriteLock lock = new ReentrantReadWriteLock();
	
	//读
	public void get() {
		lock.readLock().lock();
		
		try {
			System.out.println(Thread.currentThread().getName() + " : " + number);
		} finally {
			lock.readLock().unlock(); //释放锁
		}
	}
	
	//写
	public void set(int number) {
		lock.writeLock().lock();
		
		try {
			System.out.println(Thread.currentThread().getName() + "^^");
			this.number = number;
		} finally {
			lock.writeLock().unlock();
		}
	}
}

12. 线程池
package cn.zhangfl.juc;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 * 一、线程池：提供了一个线程队列，队列中保存所有等待状态的线程。
 * 避免了创建与销毁额外开销，提高了响应的速度
 * 
 * 二、线程池的结构：
 * java.util.concurrent.Executor:负责线程的使用与调度的跟接口
 * 		|--**ExecutorService子接口：线程池的主要接口
 * 			|--ThreadPoolExecutor线程池的实现类
 * 			|--ScheduledExecutorService子接口：负责线程的调度
 * 				|--ScheduledThreadPoolExecutor:继承ThreadPoolExecutor,实现ScheduledExecutorService
 * 
 * 三、工具类：Executors
 * ExecutorService newFixedThreadPool():创建固定大小的线程池
 * ExecutorService newCachedTHreadPool():缓存线程池，线程池的数量不固定，可以根据需求自动的更改数量。
 * ExecutorService newSingleThreadExecutor():创建单个线程池。线程池中只有一个线程
 * 
 * ScheduledExecutorService newScheduledThreadPool():创建固定大小的线程池，可以延迟或定时的执行任务。
 * 
 * @author 17799
 *
 */
public class TestThreadPool {
	public static void main(String[] args) throws InterruptedException, ExecutionException {
		//1. 创建线程池
		ExecutorService pool = Executors.newFixedThreadPool(5);
		
		List<Future<Integer>> list = new ArrayList<>();
		
		for (int i = 0; i < 10; i++) {
			Future<Integer> future = pool.submit(new Callable<Integer>() {

				@Override
				public Integer call() throws Exception {
					int sum = 0;
					for (int i = 0; i <= 100; i++) {
						sum += i;
					}
					return sum;
				}
			});
			list.add(future);
			
		}

		//关闭
		pool.shutdown();
		
		for (Future<Integer> future : list) {
			System.out.println(future.get());
		}
		
//		
//		ThreadPoolDemo tpd = new ThreadPoolDemo();
//		
//		//2.为线程池中的线程分配任务
//		for (int i = 0; i < 10; i++) {
//			pool.submit(tpd);
//		}
//		
//		//3.关闭线程池
//		pool.shutdown();//shutdown()与shutdownNow()的区别：	shutdown()会不再接受新的请求，等待线程执行完毕结束；shutdownNow()直接结束线程
//		new Thread(tpd).start();
//		new Thread(tpd).start();
	}
}

class ThreadPoolDemo implements Runnable{
	private int i = 0;
	
	@Override
		public void run() {
			while (i <= 100) {
				System.out.println(Thread.currentThread().getName() + " : " + i++);
			}
		}
}

13. 线程调度
package cn.zhangfl.juc;

import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * 一、线程池：提供了一个线程队列，队列中保存所有等待状态的线程。
 * 避免了创建与销毁额外开销，提高了响应的速度
 * 
 * 二、线程池的结构：
 * java.util.concurrent.Executor:负责线程的使用与调度的跟接口
 * 		|--**ExecutorService子接口：线程池的主要接口
 * 			|--ThreadPoolExecutor线程池的实现类
 * 			|--ScheduledExecutorService子接口：负责线程的调度
 * 				|--ScheduledThreadPoolExecutor:继承ThreadPoolExecutor,实现ScheduledExecutorService
 * 
 * 三、工具类：Executors
 * ExecutorService newFixedThreadPool():创建固定大小的线程池
 * ExecutorService newCachedTHreadPool():缓存线程池，线程池的数量不固定，可以根据需求自动的更改数量。
 * ExecutorService newSingleThreadExecutor():创建单个线程池。线程池中只有一个线程
 * 
 * ScheduledExecutorService newScheduledThreadPool():创建固定大小的线程池，可以延迟或定时的执行任务。
 * 
 * @author 17799
 *
 */
public class TestScheduledThreadPool {
	public static void main(String[] args) throws Exception {
		ScheduledExecutorService pool = Executors.newScheduledThreadPool(5);
		
		for (int i = 0; i < 10; i++) {
			Future<Integer> result = pool.schedule(new Callable<Integer>() {

				@Override
				public Integer call() throws Exception {
					int num = new Random().nextInt(10); //生成随机数
					System.out.println(Thread.currentThread().getName() + " : " + num);
					return num;
				}
				
			}, 1, TimeUnit.SECONDS);
			
			System.out.println(result.get());
		}
		
		pool.shutdown();
	}
}

14. ForkJoinPool分支/合并框架 工作窃取
package cn.zhangfl.juc;

import java.time.Duration;
import java.time.Instant;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.RecursiveTask;
import java.util.stream.LongStream;

import org.junit.Test;

public class TestForkJoinPool {
	public static void main(String[] args) {
		Instant start = Instant.now();
		
		ForkJoinPool pool = new ForkJoinPool();
		
		ForkJoinTask<Long> task = new ForkJoinSumCalculate(0L, 10000000000L);
		
		Long sum = pool.invoke(task);
		
		System.out.println(sum);
		
		Instant end = Instant.now();
		
		System.out.println("耗费时间main:" + Duration.between(start, end).toMillis());//76 //2442
	}
	
	
	@Test
	public void test1() {
		Instant start = Instant.now();
		
		long sum = 0L;
		for (long i = 0L; i <= 10000000000L; i++) {
			sum += i;
		}
		System.out.println(sum);
		
		Instant end = Instant.now();
		
		System.out.println("耗费时间test:" + Duration.between(start, end).toMillis());//54 //3608
	}
	
	//Java8新特性
	@Test
	public void test2() {
		Instant start = Instant.now();
		
		Long sum = LongStream.rangeClosed(0L, 10000000000L).parallel().reduce(0L, Long::sum);
		
		System.out.println(sum);
		
		Instant end = Instant.now();
		
		System.out.println("耗费时间test:" + Duration.between(start, end).toMillis());//1475
				
	}

}

class ForkJoinSumCalculate extends RecursiveTask<Long>{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private long start;
	private long end;
	
	private static final long THURSHOLD = 10000L; //临界值
	
	public ForkJoinSumCalculate(long start, long end) {
		this.start = start;
		this.end = end;
		
	}

	@Override
	protected Long compute() {
		long length = end - start;
		if (length <= THURSHOLD) {
			long sum = 0L;
			
			for (long i = start; i <= end; i++) {
				sum += i;
			}
			
			return sum;
		}else {
			long middle = (start + end) / 2;
			
			ForkJoinSumCalculate left =  new ForkJoinSumCalculate(start, middle);
			left.fork(); //进行拆分，同时压入线程队列
			
			ForkJoinSumCalculate right = new ForkJoinSumCalculate(middle + 1, end);
			right.fork();
			
			return left.join() + right.join();
		}
		
		
	}
	
}

