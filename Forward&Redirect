1.和属性相关的方法：
1).方法

void setAttribute(String name, Object o):设置属性
Object getAttribute(String name):获取指定的属性
Enumeration getAttributeNames():获取所有的属性的名字组成的Enumeration对象
removeAttribute(String name):移除指定的属性

2).pageContext、request、session、application对象都有这些方法！这四个对象称之为域对象.

①.pageContext:属性的作用范围仅限于当前JSP页面
②.request:属性的作用范围仅限于同一个请求.
③.session:属性的作用范围限于一次会话：浏览器打开到关闭
④.application:属性的作用范围仅限于当前WEB应用。是范围最大的的属性作用范围，只要在一处设置属性，在其他各处的JSP或Servlet中都可以获取到.

2.请求的转发和重定向：

1).请求转发的代码

    //请求的转发
		//1.调用HttpServletRequest的getRequestDispatcher()方法获取RequestDispatcher对象
		//调用getRequestDispatcher()需要传入要转发的地址
		String path = "testServlet";
		RequestDispatcher requestDispatcher = request.getRequestDispatcher("/"+path);
		
		//2.调用HttpServletRequest的forward(request, response)进行请求的转发。
		requestDispatcher.forward(request, response);

2).请求重定向的代码

    //执行请求的重定向，直接调用response.sendRedirect(path) 方法，
		//path为要重定向的地址
		String path = "testServlet";
		response.sendRedirect(path);
		

3).本质区别：请求的转发只发出了一次请求，而重定向则发出了两次请求

具体：
①.请求的转发：地址栏是初次发出请求的地址
  请求的重定向:地址栏不再是初次发出的请求地址，地址栏为最后响应的地址
 
②.请求的转发：在最终的Servlet中，request对象和中转的那个request是同一个对象.
  请求的重定向：在最终的Servlet中，request对象和中转的那个request不是同一个对象.
  
③.请求的转发：只能转发给当前WEB应用的资源
  请求的重定向：可以重定向到任何资源.
 
④.请求的转发：/代表是当前WEB应用的根目录
  请求的重定向：/代表的是当前WEB站点的根目录.


<JSP>

3.page指令：

1).page指令用于定义JSP页面的各种属性，无论page指令出现在JSP页面中的什么地方，
他做用的都是整个JSP页面，为了保持程序的可读性和遵循良好的编程习惯，page指令最好放在整个JSP页面的起始位置.

2).page指令的常用属性：

①.import属性：指定当前JSP页面对应的Servlet需要导入的类
<%@page import="java.text.Date"%>

②.session属性：取值为true或false,指定当前页面的session隐藏变量是否可用，也可以说访问当前的页面是否一定要生成HttpSession对象.
<%@page session="false"%>

③.errorPage和isErrorPage:
>errorPage指定若当前页面出现错误的实际响应页面是什么，其中/表示的是当前WEB应用的根目录.
<%@page errorPage="/error.jsp"%>

>在响应error.jsp时，JSP引擎使用的是请求转发方式

>isErrorPage指定当前的页面是否为错误处理页面，可以说明当前页面是否可以使用exception隐藏变量，需要注意的是：若指定isErrorPage="true",并使用exception的方法了，一般不建议能够直接访问该页面.

>如何使客户不能直接访问某一个页面呢？对于Tomcat服务器而言，WEB-INF下的文件是不能通过浏览器中输入地址的方式来访问，但可以通过请求的转发来访问！

>还可以在web.xml文件中配置错误页面：

  <error-page>
  	<!-- 指定出错的代码：404没有指定的资源，500内部错误 -->
  	<error-code>404</error-code>
  	<location>/hello.jsp</location>
  </error-page>
  
  <error-page>
  	<!-- 指定异常类型 -->
  	<exception-type>java.lang.ArithmeticException</exception-type>
  	<location>/WEB-INF/error.jsp</location>
  </error-page>

④.contentType:指定当前JSP页面的响应类型，实际调用的是response.setContentType("text/html;charset=UTF-8");
通常情况下，对于JSP页面而言其取值均为text/html;charset=UTF-8,charset指定返回的页面的字符编码是什么，通常取值为UTF-8.

⑤.pageEncoding:指定当前JSP页面的字符编码，通常情况下该值和contentType中的charset一致.

⑥.isELIgnored:指定当前JSP页面是否可以使用EL表达式，通常取值为false.

3.include指令：<%@include file="b.jsp"%>

1).include指令用于通知JSP引擎在翻译当前JSP页面时将其他文件中的内容合并进当前JSP页面转换成的Servlet源文件中.
这种在源文件级别进行引入的方式称为静态引入，当前JSP页面与静态引入的页面紧密结合为一个Servlet.

2).file属性的设置值必须使用相对路径

3).如果以/开头，表示相对于当前WEB应用程序的根目录(注意不是站点目录),否则，表示相对于当前文件.推荐使用/的方式包含页面.
使用绝对路径肯定没问题，使用相对路径可能会有问题！

4.jsp:include标签：

1).<jsp:include page="b.jsp"></jsp:include>

2).动态引入：并不是像include指令生成一个Servlet源文件，而是生成两个Servlet源文件，然后通过一个方法的方式把目标页面包含进来.

5.jsp:forward:

1).<jsp:forward page="include/b.jsp"></jsp:forward>

相当于==》

<%
	request.getRequestDispatcher("/include/b.jsp").forward(request, response);
%>

2).使用jsp:forward 可以使用jsp:param子标签向b.jsp传入一些参数，同样jsp:include也可以使用jsp:param子标签.

<jsp:forward page="/include/b.jsp">
	<jsp:param value="123" name="zfl"/>
</jsp:forward>

OR

<jsp:include page="/include/b.jsp">
	<jsp:param value="123" name="zfl"/>
</jsp:include>

在b.jsp页面可以通过request.getParameter("username")获取到传入的请求参数.

6.关于中文乱码：

1).在JSP页面输入中文，请求页面后不出现乱码：保证contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" charset和pageEncoding的编码一致，请都支持中文，通常建议取值为UTF-8
    
    还需保证浏览器的显示的字符编码也和请求的JSP页面的编码一致.
    
2).获取中文参数值：默认参数在传输过程中使用的编码为ISO-8859-1

①.对于POST请求：只要在获取请求信息(request.getParameter或者是request.getReader等)之前，调用request.setCharacterEncoding("UTF-8")即可.

②.对于GET请求：




