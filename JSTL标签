1.带标签体的标签

1).长的样子：

<c:forEach items="${requestScope.customers }" var="cust">
		${cust.id } -- ${cust.name } <br>
</c:forEach>

2).在定义标签中，使用JspFragment对象来表示标签体

3).如何得到代表标签体的JspFragment:

在SimpleTag接口中有一个setJspBody(JspFragment jspBody),若在tld描述文件中配置了标签有标签体，
则JSP引擎就会调用该方法把代表标签体的JspFragment对象传给标签处理器类

在SimpleTagSupport中,实现了setJspBody(JspFragment jspBody)方法，并且定义了getJspBody()方法返
回JspFragment对象：
private JspFragment jspBody;

public void setJspBody(JspFragment jspBody){
  this.jspBody = jspBody;
}

protected JspFragment getJspBody(){
  return this.jspBody;
}

若标签处理器类继承了SimpleTagSupport,则可以直接调用getJspBody()得到JspFragment对象的引用：

//把标签体的内容直接输出到页面上
getJspBody().invoke(null);

4).JspFragment中的常用的API

invoke(Writer):把标签体的内容输出到Writer指定的字符流中。

    //1.得到标签体的内容
		JspFragment bodyContet = getJspBody();
		StringWriter sw = new StringWriter();
		bodyContet.invoke(sw);
		String content = sw.toString();
		//2.变为大写
		content = content.toUpperCase();
    //3.输出
    getJspContext().getOut().print(content)
    
5).tld文件中的配置问题：body-content来配置标签体的类型

empty:代表标签体是空的
scriptless:代表可以有标签体，但标签体不能是任何Java脚本，包括表达式，但可以是EL。

<tag>
  	<name>forEach</name>
  	<tag-class>cn.zhangfl.javaweb.ForEachTag</tag-class>
  	<body-content>scriptless</body-content>
  	
  	<attribute>
  		<name>items</name>
  		<required>true</required>
  		<rtexprvalue>true</rtexprvalue>
  	</attribute>
  	<attribute>
  		<name>var</name>
  		<required>true</required>
  		<rtexprvalue>true</rtexprvalue>
  	</attribute>
  </tag>

6).自实现c:forEach功能

2.带父标签的标签

1).长得样子：

<c:choose>
	<c:when test="${param.age > 24}">大学毕业</c:when>
	<c:when test="${param.age > 20}">高中毕业</c:when>
	<c:otherwise>高中以下。。。</c:otherwise>
</c:choose>

2).应该知道的：

父标签无法获取子标签的引用，父标签仅把子标签作为标签体来使用。但子标签可以来获取父标签的引用，
通过getParent（）方法来获取。可以在子标签中对父标签进行强制的类型转换以获取父标签的细节。

3).注意：在tld配置文件中，无需为父标签有额外的配置，但子标签是以标签体的形式存在，所以父标签的
<body-content></body-content>需设置为scriptless即<body-content>scriptless</body-content>：

ChooseTag chooseTag = (ChooseTag) getParent();
boolean flag = chooseTag.isFlag();

if(flag) {
	getJspBody().invoke(null);
	chooseTag.setFlag(false);
}

4).自实现c:choose,c:when,c:otherwise标签

3.EL的自定义函数

1).步骤：

在一个public类中定义一个public的static方法-->在tld文件中对EL的自定义函数进行描述-->使用

package cn.zhangfl.javaweb;

public class MyELFunction {
	public static String concat(String str1, String str2) {
		return str1 + str2;
		
	}
}

 <function>
 	<name>concat2</name>
 	<function-class>cn.zhangfl.javaweb.MyELFunction</function-class>
 	<function-signature>java.lan.String concat(java.lang.String, java.lang.String)</function-signature>	
 </function>
 
 ${zfl:concat(param.name1, param.name2) }

















