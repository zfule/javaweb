1.HttpSession生命周期：

1).什么时候创建HttpSession对象

①.对于JSP：是否浏览器访问服务器端的任何一个JSP或Servlet，服务器都会立即创建一个HttPSession对象呢？不一定。
  ->若当前的JSP(或Servlet)是客户端访问的当前WEB应用的第一个资源，且JSP的page指定的session属性值为false,
则服务器就不会为JSP创建一个HttpSession对象；

  ->若当前JSP不是客户端访问的当前WEB应用的第一个资源，且其他页面已经创建一个HttpSession对象，则服务器也不会为
当前JSP页面创建一个新的HttpSession对象，而会把当前会话关联的那个HttpSession对象返回给当前的JSP页面

session="false" 到底表示什么意思呢？当前JSP页面禁用session隐含变量！但可以使用其他显示的HttpSession对象

②.对于Servlet而言，若Servlet是客户端访问的第一个WEB应用的资源，则只有调用了request.getSession()
或request.getSession(true)才会创建HttpSession对象

2).page指令的session="false"到底表示什么意思？
  
    >当前JSP页面禁用session隐含变量！但可以使用其他的显示的HttpSession对象
 
3).在Servlet中如何获取HttpSession对象？

  >request.getSession(boolean create): 
  create为false,若没有当前JSP页面关联的HttPSession对象则返回false;若有，则返回true 
  create为true，一定返回一个HttpSession对象，若没有和当前JSP页面关联的HttpSession对象，则服务器创建一个
  HTTP Session对象返回，若有直接返回关联的
  
  >request.getSession():等同于request.getSession(true)
  
 4).什么时候销毁HttpSession对象：
 
 ①.直接调用HttpSession的ivalidate()方法：该方法使HttpSession失效
 
 ②.服务进程被停止(或服务器卸载了当前web应用.)
 
 ③.超出HttpSession的有效时间：
 
    ->session.setMaxInactiveInterval(5);单位为秒
  
    ->在web.xml文件中设置HttpSession的过期时间：单位为分钟
    
        <!-- ==================== Default Session Configuration ================= -->
  <!-- You can set the default session timeout (in minutes) for all newly   -->
  <!-- created sessions by modifying the value below.                       -->

    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>

④.关闭浏览器只会是存储在客户端浏览器内存中的session cookie失效，不会是服务器端的session对象失效

2.HttpSession的相关API

1).获取Session对象：request.getSession()，request.getSession(boolean create)

2).属性相关的setAttribute,getAttribute,removeAttribute

3).使HttpSession失效的：invalidate()方法

4).设置其最大失效的setMaxInactiveInterval

3.URL 重写：

1).Servlet规范引入了一种补充的会话管理机制，它允许不支持Cookie的浏览器也可以与WEB服务器保持连续的会话

2).将会话标识号以参数形式附加在超链接的URL地址后面的技术称为URL重写

3).代码：
 
 	<a href="<%= response.encodeURL("login.jsp") %>">重新登陆</a>
	&nbsp;&nbsp;&nbsp;&nbsp;
	<a href="<%= response.encodeURL("logout.jsp") %>">注销</a>	

4.绝对路径问题：

1).开发时建议编写“绝对路径”：写绝对路径肯定没有问题，相对路径可能出现问题

在由Servlet转发到JSP页面时，此时浏览器地址栏上显示的是Servlet的路径，而若JSP页面的超链接还是相对于该
JSP页面的地址，则可能出现路径混乱的问题.

see project[day_1009]

/a.jsp
	-path
		/b.jsp
		/c.jsp

a.jsp->/Servlet-转发->b.jsp(有一个超链接：和b.jsp在同一路径下的c.jsp)->无法得到页面

2).编写绝对路径可以避免上述问题：

①.在JavaWEB中什么叫“绝对路径”：相当于当前contextPath的路径。任何的路径都需要带上contentPath

http://localhost:8080/day_1009(当前WEB应用的上下文路径)/a.jsp √
http://localhost:8080/a.jsp ×

②.如何编写绝对路径:若/代表的是站点的根目录，在其前加上contextPath就可以了.而contextPath可以
由request或application的getContextPath()方法来获取

<a href="<%= request.getContextPath()%>/TestServlet">To B Page</a>
response.sendRedirect(request.getContextPath() + "/path/c.jsp");

3).JavaWEB开发中的/到底代表什么？

①.JavaWEB应用的根路径：http://localhost:8080/contextPath/: 若/需交由Servlet容器来处理

 > 请求转发时：request.getRequestDispatcher("/path/b.jsp").forward(request, response);
 
 > web.xml 文件中映射Servlet访问路径
 
 <servlet-mapping>
 	<servlet-name>TestServlet</servlet-name>
	<url-pattern>/TestServlet</url-pattern>
 </servlet-mapping>
 
 > 各种定制标签中的/
 
 ②.WEB站点的根路径：http://localhost:8080/：若/交由浏览器来处理

 > 超链接：<a href="/TestServlet">To B Page</a>
 > 表单中的action:<form action="/login.jsp">
 > 做请求重定向的时候：response.sendRedirect("/a.jsp")

5.表单的重复提交

1).重复提交的情况：

①.在表单提交到一个Servlet，而Servlet又通过请求转发的方式响应一个JSP(HTML)页面，
此时地址栏还保留着Servlet的那个按钮，在响应页面点击“刷新”
②.在响应页面没有达到时重复点击“提交按钮”
③.点击“返回”，再点击“提交”

2).不是重复提交的情况：点击“返回”，“刷新”原表单页面，再“提交”










