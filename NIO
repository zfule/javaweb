1. NIO与IO的主要区别：
IO                          NIO
面向流(Stream Oriented)；   面向缓冲区(Buffer Oriented);
阻塞IO(Blocking IO);        非阻塞IO(Non Blocking IO);
(无);                       选择器(Selectors);
1.1 通道(Channel)与缓冲区(Buffer)
通道负责传输(传输通道)
缓冲区负责存储(数据存储)

1.1.1缓冲区
package cn.zhangfl.nio;

import java.nio.ByteBuffer;

import org.junit.Test;

/**
 * 一、缓冲区(Buffer):在Java NIO中负责数据的存取。缓冲区就是数组。用于存储不同数据类型的数据
 * 
 * 根据数据类型不同(boolean除外)，提供了相应类型的缓冲区:
 * ByteBuffer
 * CharBuffer
 * ShortBuffer
 * IntBuffer
 * LongBuffer
 * FloatBuffer
 * DoubleBuffer
 * 
 * 上述缓冲区的管理方式几乎一致，通过allocate()获取缓冲区
 * 
 * 二、缓冲区存取的数据的两个核心方法
 * put():存入数据到缓冲区
 * get():获取缓冲区中的数据
 * 
 * 三、缓冲区的四个核心属性
 * capacity:容量，表示缓冲区中最大存储数据的容量。一旦声明不能改变。
 * limit:界限，表示缓冲区中可以操作数据的大小。(limit后数据不能进行读写)
 * position:位置，表示缓冲区中正在操作数据的位置。
 * 
 * mark:标记，表示记录当前position的位置。可以通过reset()恢复到mark的位置
 * 
 * 0 <= mark <= position <= limit <= capacity
 * 
 * 四、直接缓冲区与非直接缓冲区
 * 非直接缓冲区:通过allocate()方法分配缓冲区，将缓冲区建立在JVM的内存中
 * 直接缓存区:通过allocateDirect()方法分配直接缓冲区，将缓冲区建立在物理内存中。可以提高效率
 * 
 * @author 17799
 *
 */
public class TestBuffer {
	
	@Test
	public void test3() {
		//分配直接缓冲区
		ByteBuffer buffer = ByteBuffer.allocateDirect(1024);
		
		System.out.println(buffer.isDirect());//判断是否为直接缓冲区
		
	}
	
	@Test
	public void test2() {
		String str = "abcde";
		ByteBuffer buffer = ByteBuffer.allocate(1024);
		buffer.put(str.getBytes());
		buffer.flip();
		
		byte[] dst = new byte[buffer.limit()];
		buffer.get(dst, 0, 2);
		System.out.println(new String(dst, 0, 2));//ab
		System.out.println(buffer.position());//2
		
		//mark():标记
		buffer.mark();
		
		buffer.get(dst, 2, 2);
		System.out.println(new String(dst, 2, 2));//cd
		System.out.println(buffer.position());//4
		
		//reset():恢复到mark的位置
		buffer.reset();
		System.out.println(buffer.position());//2
		
		//判断缓冲区中是否还有剩余数据
		if (buffer.hasRemaining()) {
			//获取缓冲区中可以操作的数量
			System.out.println(buffer.remaining());
		}

	}
	
	@Test
	public void test1() {
		String str = "abcde";
		System.out.println(str.getBytes());
		
		//1. 分配一个指定大小的缓冲区
		ByteBuffer buffer =  ByteBuffer.allocate(1024);
		
		System.out.println("----------allocate-----------------------");
		System.out.println("buffer.capacity>>>" + buffer.capacity());
		System.out.println("buffer.limit>>>" + buffer.limit());
		System.out.println("buffer.position>>>" + buffer.position());
		
		//2. 利用put()存入数据到缓冲区中
		buffer.put(str.getBytes());
		
		System.out.println("----------put-----------------------");
		System.out.println("buffer.capacity>>>" + buffer.capacity());
		System.out.println("buffer.limit>>>" + buffer.limit());
		System.out.println("buffer.position>>>" + buffer.position());
		
		//3.切换到读数据模式
		buffer.flip();
		
		System.out.println("----------filp-----------------------");
		System.out.println("buffer.capacity>>>" + buffer.capacity());
		System.out.println("buffer.limit>>>" + buffer.limit());
		System.out.println("buffer.position>>>" + buffer.position());
		
		//4.利用get()读取缓冲区中的数据
		System.out.println("----------get-----------------------");
		byte[] dst = new byte[buffer.limit()];
		buffer.get(dst);
		System.out.println(new String(dst, 0, dst.length));
		System.out.println("buffer.capacity>>>" + buffer.capacity());
		System.out.println("buffer.limit>>>" + buffer.limit());
		System.out.println("buffer.position>>>" + buffer.position());
		
		//5.rewind():可重复读
		buffer.rewind();
		System.out.println("----------rewind-----------------------");
		
		System.out.println((char)buffer.get());
		
		System.out.println("buffer.capacity>>>" + buffer.capacity());
		System.out.println("buffer.limit>>>" + buffer.limit());
		System.out.println("buffer.position>>>" + buffer.position());
		
		//6.clear():清空缓冲区,但是缓存区中的数据依然存在，但是处于"被遗忘"状态
		buffer.clear();
		
		System.out.println("----------clear-----------------------");
		
		System.out.println((char)buffer.get());
		
		System.out.println("buffer.capacity>>>" + buffer.capacity());
		System.out.println("buffer.limit>>>" + buffer.limit());
		System.out.println("buffer.position>>>" + buffer.position());
		
		
	}

}

1.1.2通道

