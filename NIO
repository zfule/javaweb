1. NIO与IO的主要区别：
IO                          NIO
面向流(Stream Oriented)；   面向缓冲区(Buffer Oriented);
阻塞IO(Blocking IO);        非阻塞IO(Non Blocking IO);
(无);                       选择器(Selectors);
1.1 通道(Channel)与缓冲区(Buffer)
通道负责传输(传输通道)
缓冲区负责存储(数据存储)

1.1.1缓冲区
package cn.zhangfl.nio;

import java.nio.ByteBuffer;

import org.junit.Test;

/**
 * 一、缓冲区(Buffer):在Java NIO中负责数据的存取。缓冲区就是数组。用于存储不同数据类型的数据
 * 
 * 根据数据类型不同(boolean除外)，提供了相应类型的缓冲区:
 * ByteBuffer
 * CharBuffer
 * ShortBuffer
 * IntBuffer
 * LongBuffer
 * FloatBuffer
 * DoubleBuffer
 * 
 * 上述缓冲区的管理方式几乎一致，通过allocate()获取缓冲区
 * 
 * 二、缓冲区存取的数据的两个核心方法
 * put():存入数据到缓冲区
 * get():获取缓冲区中的数据
 * 
 * 三、缓冲区的四个核心属性
 * capacity:容量，表示缓冲区中最大存储数据的容量。一旦声明不能改变。
 * limit:界限，表示缓冲区中可以操作数据的大小。(limit后数据不能进行读写)
 * position:位置，表示缓冲区中正在操作数据的位置。
 * 
 * mark:标记，表示记录当前position的位置。可以通过reset()恢复到mark的位置
 * 
 * 0 <= mark <= position <= limit <= capacity
 * 
 * 四、直接缓冲区与非直接缓冲区
 * 非直接缓冲区:通过allocate()方法分配缓冲区，将缓冲区建立在JVM的内存中
 * 直接缓存区:通过allocateDirect()方法分配直接缓冲区，将缓冲区建立在物理内存中。可以提高效率
 * 
 * @author 17799
 *
 */
public class TestBuffer {
	
	@Test
	public void test3() {
		//分配直接缓冲区
		ByteBuffer buffer = ByteBuffer.allocateDirect(1024);
		
		System.out.println(buffer.isDirect());//判断是否为直接缓冲区
		
	}
	
	@Test
	public void test2() {
		String str = "abcde";
		ByteBuffer buffer = ByteBuffer.allocate(1024);
		buffer.put(str.getBytes());
		buffer.flip();
		
		byte[] dst = new byte[buffer.limit()];
		buffer.get(dst, 0, 2);
		System.out.println(new String(dst, 0, 2));//ab
		System.out.println(buffer.position());//2
		
		//mark():标记
		buffer.mark();
		
		buffer.get(dst, 2, 2);
		System.out.println(new String(dst, 2, 2));//cd
		System.out.println(buffer.position());//4
		
		//reset():恢复到mark的位置
		buffer.reset();
		System.out.println(buffer.position());//2
		
		//判断缓冲区中是否还有剩余数据
		if (buffer.hasRemaining()) {
			//获取缓冲区中可以操作的数量
			System.out.println(buffer.remaining());
		}

	}
	
	@Test
	public void test1() {
		String str = "abcde";
		System.out.println(str.getBytes());
		
		//1. 分配一个指定大小的缓冲区
		ByteBuffer buffer =  ByteBuffer.allocate(1024);
		
		System.out.println("----------allocate-----------------------");
		System.out.println("buffer.capacity>>>" + buffer.capacity());
		System.out.println("buffer.limit>>>" + buffer.limit());
		System.out.println("buffer.position>>>" + buffer.position());
		
		//2. 利用put()存入数据到缓冲区中
		buffer.put(str.getBytes());
		
		System.out.println("----------put-----------------------");
		System.out.println("buffer.capacity>>>" + buffer.capacity());
		System.out.println("buffer.limit>>>" + buffer.limit());
		System.out.println("buffer.position>>>" + buffer.position());
		
		//3.切换到读数据模式
		buffer.flip();
		
		System.out.println("----------filp-----------------------");
		System.out.println("buffer.capacity>>>" + buffer.capacity());
		System.out.println("buffer.limit>>>" + buffer.limit());
		System.out.println("buffer.position>>>" + buffer.position());
		
		//4.利用get()读取缓冲区中的数据
		System.out.println("----------get-----------------------");
		byte[] dst = new byte[buffer.limit()];
		buffer.get(dst);
		System.out.println(new String(dst, 0, dst.length));
		System.out.println("buffer.capacity>>>" + buffer.capacity());
		System.out.println("buffer.limit>>>" + buffer.limit());
		System.out.println("buffer.position>>>" + buffer.position());
		
		//5.rewind():可重复读
		buffer.rewind();
		System.out.println("----------rewind-----------------------");
		
		System.out.println((char)buffer.get());
		
		System.out.println("buffer.capacity>>>" + buffer.capacity());
		System.out.println("buffer.limit>>>" + buffer.limit());
		System.out.println("buffer.position>>>" + buffer.position());
		
		//6.clear():清空缓冲区,但是缓存区中的数据依然存在，但是处于"被遗忘"状态
		buffer.clear();
		
		System.out.println("----------clear-----------------------");
		
		System.out.println((char)buffer.get());
		
		System.out.println("buffer.capacity>>>" + buffer.capacity());
		System.out.println("buffer.limit>>>" + buffer.limit());
		System.out.println("buffer.position>>>" + buffer.position());
		
		
	}

}

1.1.2通道
package cn.zhangfl.nio;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileChannel.MapMode;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.junit.Test;

/**
 * 一、通道(Channel):用于源节点与目标节点的连接。在Java NIO中负责缓冲区中数据的传输。Channel本身不存储数据，因此需要配合缓冲区进行传输。
 * 
 * 二、通道的主要实现类
 * 	java.nio.channels.Channel接口:
 * 		|--FileChannel
 * 		|--SocketChannel
 * 		|--ServerSocketChannel
 * 		|--DatagramChannel
 * 
 * 三、获取通道
 * 1. Java针对支持通道的类提供了getChannel()方法
 * 		本地IO：
 * 		FileInputStream/FileOutStream
 * 		RandomAccessFile
 * 		
 * 		网络IO：
 * 		Socket
 * 		ServerSocket
 * 		DatagramSocket
 * 
 * 2. 在JDK1.7中的NIO.2针对各个通道提供了静态方法open()
 * 
 * 3. 在JDK1.7中的NIO.2的Files工具类的newByteChannel()
 * 
 * 四、通道之间的数据传输
 * transferForm()
 * trasferTo()
 * 
 * 五、分散(Scatter)与聚集(Gather)
 * 分散读取(Scattering Reads):将通道中的数据分散到多个缓冲区中
 * 聚集写入(Gathering Writes):将多个缓冲区中的数据聚集到通道中
 * 
 * 六、字符集:Charset
 * 编码:字符串->字符数组
 * 解码:字符数组->字符串
 * 
 * @author 17799
 *
 */
public class TestChannel {
	
	
	
	//字符集
	@Test
	public void test6() throws Exception {
		Charset cs1 = Charset.forName("GBK");
		//获取编码器
		CharsetEncoder ce = cs1.newEncoder();
		//获取解码器
		CharsetDecoder cd = cs1.newDecoder();
		
		CharBuffer cBuffer = CharBuffer.allocate(1024);
		cBuffer.put("好好学习!");
		cBuffer.flip();
		
		//编码
		ByteBuffer byteBuffer = ce.encode(cBuffer);
		
		while (byteBuffer.remaining() > 0) {
			System.out.println(byteBuffer.get());
		}
//		for (int i = 0; i < 12; i++) {
//			System.out.println(byteBuffer.get());
//			System.out.println("87行>>>");
//		}
		System.out.println("执行了吗?>>>");
		//解码
		byteBuffer.flip();
		CharBuffer cBuffer2 = cd.decode(byteBuffer);
		System.out.println(cBuffer2.toString());
		
		System.out.println("-----------------");
		Charset cs2 = Charset.forName("GBK");
		byteBuffer.flip();
		CharBuffer cBuffer3 =  cs2.decode(byteBuffer);
		System.out.println(cBuffer3.toString());
		
		
	}
	
	@Test
	public void test5() {
		Map<String, Charset> map = Charset.availableCharsets();
		Set<Entry<String, Charset>> set = map.entrySet();
		
		for (Entry<String, Charset> entry : set) {
			System.out.println(entry.getKey() + "=" + entry.getValue());
		}
	}
	
	
	//分散和聚集
	@Test
	public void test4() throws Exception {
		RandomAccessFile raf1 =  new RandomAccessFile("1.txt", "rw");
		//1.获取通道
		FileChannel channel_1 = raf1.getChannel();
		//2.分配指定大小的缓冲区
		ByteBuffer buffer1 = ByteBuffer.allocate(100);
		ByteBuffer buffer2 = ByteBuffer.allocate(1024);
		//分散读取
		ByteBuffer[] buffers = {buffer1, buffer2};
		channel_1.read(buffers);
		
		for (ByteBuffer byteBuffer : buffers) {
			byteBuffer.flip();
		}
		System.out.println(new String(buffers[0].array(), 0, buffers[0].limit()));
		System.out.println("---------------");
		System.out.println(new String(buffers[1].array(), 0, buffers[1].limit()));
		
		//数据写入
		RandomAccessFile raf2 = new RandomAccessFile("2.txt", "rw");
		FileChannel channel_2 = raf2.getChannel();
		
		channel_2.write(buffers);
	}
	
	//通道之间的数据传输(直接缓冲区)	//transferTo复制文件会缺失数据;transferFrom复制文件暂时未发现缺失数据
	@Test
	public void test3() throws Exception {
		FileChannel inChannel = FileChannel.open(Paths.get("D:\\qycache\\download\\精灵旅社\\精灵旅社2-英语4K(限免).qsv"), StandardOpenOption.READ);
		FileChannel outChannel = FileChannel.open(Paths.get("D:\\qycache\\download\\精灵旅社\\test3.1.qsv"), StandardOpenOption.WRITE,StandardOpenOption.READ, StandardOpenOption.CREATE_NEW);
		
//		inChannel.transferTo(0, inChannel.size(), outChannel);
		outChannel.transferFrom(inChannel, 0, inChannel.size());
		
		inChannel.close();
		outChannel.close();
	}
	
	//2. 利用直接缓冲区完成文件的复制(内存映射文件)//文件大小超过Integer.MAX_VALUE时会报错
	@Test
	public void test2() throws IOException {
		
		long start = System.currentTimeMillis();
		
		FileChannel inChannel = FileChannel.open(Paths.get("D:\\qycache\\download\\精灵旅社\\精灵旅社2-英语4K(限免).qsv"), StandardOpenOption.READ);
		FileChannel outChannel = FileChannel.open(Paths.get("D:\\qycache\\download\\精灵旅社\\test2.qsv"), StandardOpenOption.WRITE,StandardOpenOption.READ, StandardOpenOption.CREATE_NEW);
		
		//内存映射文件
		MappedByteBuffer inMappedByteBuffer = inChannel.map(MapMode.READ_ONLY, 0, inChannel.size());
		
		MappedByteBuffer outMappedByteBuffer = outChannel.map(MapMode.READ_WRITE, 0, inChannel.size());
		
		//直接对缓冲区进行数据的读写操作
		byte[] dst = new byte[inMappedByteBuffer.limit()];
		inMappedByteBuffer.get(dst);
		outMappedByteBuffer.put(dst);
		
		inChannel.close();
		outChannel.close();
		
		long end = System.currentTimeMillis();
		System.out.println("2耗费时间为>>>" + (end - start));
	}
	
	
	//1. 利用通道完成文件的赋值(非直接缓冲区)
	@Test
	public void test1() {//68449-64527
		long start = System.currentTimeMillis();
		
		FileInputStream fis = null;
		FileOutputStream fos = null;
		//①获取通道
		FileChannel inChannel = null;
		FileChannel ouChannel = null;
		try {
			fis = new FileInputStream("D:\\qycache\\download\\精灵旅社\\精灵旅社2-英语4K(限免).qsv");
			fos = new FileOutputStream("D:\\qycache\\download\\精灵旅社\\test1.qsv");
			
			inChannel = fis.getChannel();
			ouChannel = fos.getChannel();
			
			//②分配指定大小的缓冲区
			ByteBuffer buffer = ByteBuffer.allocate(1024);
			
			//③将通道中数据存入缓冲区中
			while (inChannel.read(buffer) != -1) {
				buffer.flip();//切换成读取数据模式
				
				//④将缓冲区中的数据写入到通道中
				ouChannel.write(buffer);
				buffer.clear();//清空缓冲区
				
			}
		} catch (IOException e) {
			
			e.printStackTrace();
		}finally {
			if (ouChannel != null) {
				try {
					ouChannel.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (inChannel != null) {
				try {
					inChannel.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (fos != null) {
				try {
					fos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (fis != null) {
				try {
					fis.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		
		long end = System.currentTimeMillis();
		System.out.println("1耗费时间为>>>" + (end - start));	
	}
}

2.非阻塞
package cn.zhangfl.nio2;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Date;
import java.util.Iterator;
import java.util.Scanner;

import org.junit.Test;

/**
 * 一、使用NIO完成网络通信的三个核心:
 * 1.通道(Channel):负责连接
 * 		java.nio.channel.Channel接口:
 * 			|--SelectableChannel
 * 				|--SocketChannel
 * 				|--ServerSocketChannel
 * 				|--DatagramChannel
 * 
 * 				|--Pipe.SinkChannel
 * 				|--Pipe.SourceChannel
 * 
 * 
 * 2.缓冲区(Buffer):负责数据的存取
 * 
 * 3.选择器(Selector):是SelectableChannel的多路复用器。用于监控SelectableChannel的IO情况
 * 
 * 
 * @author 17799
 *
 */
public class TestNonBlockingNIO {
	
	//客户端
	@Test
	public void client() {
		SocketChannel sChannel = null;
		try {
			//1.获取通道
			sChannel = SocketChannel.open(new InetSocketAddress("127.0.0.1", 9898));
			//2.切换非阻塞模式
			sChannel.configureBlocking(false);
			//3.分配指定大小的缓冲区
			ByteBuffer buf = ByteBuffer.allocate(1024);
			//4.发送数据给服务端
			Scanner scanner = new Scanner(System.in);
			while (scanner.hasNext()) {
				String str = scanner.next();
				buf.put((new Date().toString() + "\n" + str).getBytes());
				buf.flip();
				sChannel.write(buf);
				buf.clear();
			}
			
			
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
			if (sChannel != null) {
				try {
					sChannel.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}		
		}
	}
	//服务端
	@Test
	public void server() {
		ServerSocketChannel ssChannel = null;
		try {
			//1.获取通道
			ssChannel = ServerSocketChannel.open();
			//2.切换非阻塞模式
			ssChannel.configureBlocking(false);
			//3.绑定连接
			ssChannel.bind(new InetSocketAddress(9898));
			//4.获取选择器
			Selector selector = Selector.open();
			//5.将通道注册到选择器上，并且指定“监听接收事件”
			ssChannel.register(selector, SelectionKey.OP_ACCEPT);
			//6.轮询是的获取选择器上已经“准备就绪”的事件
			while (selector.select() > 0) {
				//7.获取当前选择器中所有注册的“选择键（已就绪的监听事件）”
				Iterator<SelectionKey> it = selector.selectedKeys().iterator();
				
				while (it.hasNext()) {
					//8.获取准备“就绪”的事件
					SelectionKey sk = (SelectionKey) it.next();
					//9.判断具体是什么事件准备就绪
					if (sk.isAcceptable()) {
						//10.若“接受就绪”，获取客户端连接
						SocketChannel sChannel = ssChannel.accept();
						//11.切换非阻塞模式
						sChannel.configureBlocking(false);
						//12.将该通道注册到选择器上
						sChannel.register(selector, SelectionKey.OP_READ);
					}else if (sk.isReadable()) {
						//13.获取当前选择器上“读就绪”状态的通道
						SocketChannel sChannel = (SocketChannel) sk.channel();
						//14.读取数据
						ByteBuffer buf = ByteBuffer.allocate(1024);
						
						int len = 0;
						while ((len = sChannel.read(buf)) > 0) {
							buf.flip();
							System.out.println(new String(buf.array(), 0, len));
							buf.clear();
						}
					}
					
					//15.取消选择键SelectionKey
					it.remove();
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	

}

